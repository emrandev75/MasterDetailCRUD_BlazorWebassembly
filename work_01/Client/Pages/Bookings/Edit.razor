@page "/Bookings/Edit/{id:int}"
@using work_01.Shared.DTO;
@using work_01.Shared.Models;
@inject HttpClient http
@inject IToastService toastService
@inject NavigationManager NavigationManager

<div class="row bg-light shadow justify-content-center">
    <div class="col-10">
        <EditForm Model="@booking" OnValidSubmit="SaveBooking">
            <h3 class="text-center fw-bold text-secondary mb-4">Update Booking Details</h3>
            <DataAnnotationsValidator />
            <div class="form-group row mb-1">
                <label class="col-form-label fw-bold text-secondary col-4 text-end" for="@booking.CustomerID">Customer</label>
                <div class="col-6">
                    <InputSelect @bind-Value="booking.CustomerID" class="form-select">
                        <option value="">Select</option>
                        @if (customers is not null)
                        {
                            foreach (var c in customers)
                            {
                                <option value="@c.CustomerID">@c.CustomerName</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(()=>booking.CustomerID)" class="text-danger" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-4 fw-bold text-secondary text-end" for="@booking.StartDate">Start date</label>
                <div class="col-6">
                    <InputDate Type="InputDateType.Date" @bind-Value="@booking.StartDate" class="form-control" />
                    <ValidationMessage For="@(()=>booking.StartDate)" class="text-danger" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-4 fw-bold text-secondary text-end" for="@booking.EndDate">Delivery date</label>
                <div class="col-6">
                    <InputDate Type="InputDateType.Date" @bind-Value="@booking.EndDate" class="form-control" />
                    <ValidationMessage For="@(()=>booking.EndDate)" class="text-danger" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-4 fw-bold text-secondary text-end" for="@booking.Status">Status</label>
                <div class="col-6">
                    <InputSelect @bind-Value="@booking.Status" class="form-select" >
                        @if (statusNames is not null)
                        {
                            foreach (var s in statusNames)
                            {
                                <option value="@s">@s</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(()=>booking.EndDate)" class="text-danger" />
                </div>
            </div>
            <div class="form-group row mb-4">

                <div class="col-11">
                    <div class="d-flex justify-content-between">
                        <h4 class="fw-bold text-secondary">Spot Item</h4> <button @onclick="@AddItem" type="button" class="btn btn-outline-primary shadow btn-sm m-1"><i class="bi bi-plus"></i>Add</button>
                    </div>
                </div>
            </div>
            @foreach (var oi in booking.BookingItems)
            {
                int i = 1;
                <div class="form-group row mb-1 ">
                    <label class="col-form-label col-2 fw-bold text-secondary text-end" for="@booking.CustomerID">Spot</label>
                    <div class="col-3">
                        <InputSelect @bind-Value="oi.SpotID" class="form-select">
                            <option value="">Select</option>
                            @if (spots is not null)
                            {
                                foreach (var p in spots)
                                {
                                    <option value="@p.SpotID">@p.SpotName</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=>oi.SpotID)" class="text-danger" />
                    </div>
                    <label class="col-form-label col-2 fw-bold text-secondary text-end" for="@oi.Travelers">Travelers</label>
                    <div class="col-3">
                        <InputNumber @bind-Value="oi.Travelers" class="form-control" />

                        <ValidationMessage For="@(()=>oi.Travelers)" class="text-danger" />
                    </div>
                    <div class="col-1">
                        <button @onclick="@(()=>RemoveItem(i++))" type="button" class="btn btn-outline-danger  shadow btn-sm">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
                
            }
            <br />
            <div class="form-group row mb-3 mt-2">

                <div class="col-12">
                    <div class="d-flex justify-content-between">
                        <a href="/Bookings/List" class="btn shadow btn-link">Back to list</a>
                        <button type="submit" class="btn btn-outline-warning shadow">Update the booking</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }
    private BookingEditDTO? booking = new();
    private Customer[]? customers;
    private Spot[]? spots;
    private string[]? statusNames;
    protected override async Task OnInitializedAsync()
    {

        statusNames = Enum.GetNames<Status>();
        customers = await http.GetFromJsonAsync<Customer[]>("api/Customers");
        spots = await http.GetFromJsonAsync<Spot[]>("api/Spots");
        booking = await http.GetFromJsonAsync<BookingEditDTO>($"api/Bookings/{id}");
        if(booking is not null)
        {
            BookingItem[]? data = await http.GetFromJsonAsync<BookingItem[]>($"api/Bookings/OI/{id}");
            if(data is not null)
            {
                foreach(var oi in data)
                {
                    booking.BookingItems.Add(new BookingItemEditDTO{BookingID=oi.BookingID, SpotID=oi.SpotID, Travelers=oi.Travelers, Price=0});
                }
            }
        }
    }
    private void AddItem()
    {
        booking?.BookingItems.Add(new BookingItemEditDTO());
    }
    private void RemoveItem(int index)
    {
        if (booking is not null && booking.BookingItems.Count > 1)
            ((List<BookingItemEditDTO>)booking.BookingItems).RemoveAt(index);
    }
    private async Task SaveBooking()
    {
        var response = await http.PutAsJsonAsync($"api/Bookings/DTO/{id}", booking);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Data saved successfully");
            NavigationManager.NavigateTo("/Bookings/List");

        }
        else
        {
            toastService.ShowError("Failed to data.");
        }
        await Task.CompletedTask;
    }
}
