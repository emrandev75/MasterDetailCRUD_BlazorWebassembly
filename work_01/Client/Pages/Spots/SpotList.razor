@page "/Spots/List"
@attribute [Authorize]
@using work_01.Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient http
@inject IToastService toastService


<div class="row justify-content-center">
    <div class="col-10 ">
        <h3 class="text-center fw-bold text-secondary">Spot List</h3>
        <div class="d-flex justify-content-end mb-2">
            <a class="btn btn-outline-primary shadow-lg btn-sm" href="/Spots/Create"><i class="bi bi-plus"></i>Add New Spot</a>
        </div>
        @if (spots is null)
        {
            <div>Loading...</div>
        }
        else
        {
            <table class="table table-bordered table-striped table-responsive-sm table-hover shadow">
                <thead class="table-light">
                    <tr>
                        <th></th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Available?</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in spots)
                    {
                        <tr>
                            <td width="70" height="50"><img src="/Uploads/@p.Picture" class="rounded  border-secondary " style="width:45px; border:solid;border-image-slice:fill;margin-left:4px;" /></td>
                            <td>@p.SpotName</td>
                            <td>@p.Price.ToString("0.00")</td>
                            <td>@(p.IsAvailable ? "Yes" : "No")</td>
                            <td  >
                                <a class="btn btn-outline-success shadow-sm btn-sm" href="/Spots/edit/@p.SpotID"><i class="bi bi-pencil"></i>Edit</a>
                                <button @onclick="@( ()=>Delete(p.SpotID))" class="btn btn-outline-danger shadow-sm btn-sm justify-content-end"><i class="bi bi-trash"></i>Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private Spot[]? spots;
    protected override async Task OnInitializedAsync()
    {
        spots = await http.GetFromJsonAsync<Spot[]>("api/Spots");
    }
    private async Task Delete(int id)
    {
        var response = await http.DeleteAsync($"api/Spots/{id}");
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowWarning("Data deleted successfully");
            spots = await http.GetFromJsonAsync<Spot[]>("api/Spots");

        }
        else
        {
            toastService.ShowError("Failed to delete data.");
        }
    }
}
